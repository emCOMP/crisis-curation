#! /bin/bash


COLOR='\e[0;32m'
STATUS_COLOR='\e[0;32m'
ERROR_COLOR='\e[0;31m'
NC='\e[0m'

echo_Status () {
	echo -e "${STATUS_COLOR}${1}${NC}"
}

echo_Error () {
	echo -e "${ERROR_COLOR}${1}${NC}"
}

######INITIALIZATION CODE = Derive/validate paths.
folder_crisisServer_root=`pwd`
folder_mongo_root=`sudo which mongod`
if [ "${folder_mongo_root}" = "" ] #Check mongod was found
then
	echo_Error"Could not find location of mongod"
	exit 1
else
	folder_mongo_root=${folder_mongo_root%\/mongod}
	if [ ! -e ${folder_crisisServer_root}/crisisServer.py ]
	then
		echo_Error "Could not find location of crisisServer.py"
	exit 1
	fi	
fi

######INITIALIZATION CODE ends



###### CHECK/EXECUTE MONGOD
echo_Status "Checking for running instance of Mongo DB server."
mongod_running=`pgrep -f mongod | wc -l`
if [[ $mongod_running == 0 ]]
then  	echo_Status "Mongo DB server is not running"
	echo_Status "Starting Mongo DB server"
	sudo ${folder_mongo_root}/mongod --fork --logpath ${folder_mongo_root}/mongo_server.log

	###Validate mongod has begun execution
	mongod_running=`pgrep -f mongod | wc -l`
	if [[ $mongod_running == 0 ]]
	then 	echo_Error "Failed to start Mongo DB server. Check ${folder_mongo_root}/mongo_server.log for details"
		exit 2
	fi

#skip 		
else	echo_Status "Running instance of Mongo DB server detected."
	echo_Status "Proceeding with execution..."
fi
###### CHECK/EXECUTE MONGOD ends

###### DROP CURRENT_DATABASE IN MONGO DB
echo_Status "Inspecting Database for \"Current Database\" collection"
mongo << EOF
use current_database
db.dropDatabase()
exit
EOF

echo_Status "Current Database wiped for new execution."
###### DROP CURRENT_DATABASE IN MONGO DB ends

##### STARTING crisisServer.py
echo_Status "Checking for running instance of crisisSever"
crisisServer_running=`pgrep -f crisisServer.py | wc -l`
if [[ $crisisServer_running == 0 ]]
then  	echo_Status "crisisServer is not running"
	echo_Status "Starting crisisServer"

#reset
else	echo_Status "Running instance of crisisServer detected."
	echo_Status "Killing existing instance and rerunning server"
	pgrep -f crisisServer.py | xargs kill
fi
nohup python ${folder_crisisServer_root}/crisisServer.py &
sleep 1

###Validate crisisServer has begun execution
crisisServer_running=`pgrep -f crisisServer.py | wc -l`
if [[ $crisisServer_running == 0 ]]
then 	echo_Error "Could not start crisisServer.py"
	exit 3
fi
echo_Status "CrisisServer initiated."
###### STARTING crisisServer.py ends

###### STARTING historicalTweets.py
echo_Status "Checking for running instance of historicalTweets.py"
historicalTweets_running=`pgrep -f historicalTweets.py | wc -l`
if [[ $historicalTweets_running == 0 ]]
then  	echo_Status "historicalTweets.py is not running"
	echo_Status "Starting historical Tweets pull"

#reset
else	echo_Status "Running instance of historicalTweets.py detected."
	echo_Status "Killing existing instance and re-executing"
	pgrep -f historicalTweets.py | xargs kill
fi
nohup python ${folder_crisisServer_root}/historicalTweets.py &
sleep 1

###Validate historicalTweets has begun execution
historicalTweets_running=`pgrep -f historicalTweets.py | wc -l`
if [[ $historicalTweets_running == 0 ]]
then 	echo_Status "Could not start historicaltweeets.py"
	exit 4
fi
echo_Status "Historical Tweets are now being pulled."
###### STARTIN historicalTweets.py ends
